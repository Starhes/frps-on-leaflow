name: Build and Push Docker Image to GHCR

# 触发条件：当代码推送到 main 分支时，或手动在 Actions 页面触发
on:
  push:
    branches:
      - main
  workflow_dispatch:name: Build and Push Docker Image to GHCR

# 触发条件：当代码推送到 main 分支时，或手动在 Actions 页面触发
on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    # 关键：为 GITHUB_TOKEN 授予写入包的权限
    permissions:
      contents: read
      packages: write

    steps:
      # 1. 检出代码
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. 获取最新的 frp 版本号
      - name: Get Latest FRP Version
        id: get_version
        run: |
          echo "Fetching latest FRP release version..."
          # 使用 curl 跟随重定向，并从最终URL中提取版本号
          LATEST_URL=$(curl -s -L -o /dev/null -w '%{url_effective}' https://github.com/fatedier/frp/releases/latest)
          VERSION=$(echo $LATEST_URL | grep -oE 'v[0-9]+\.[0-9]+\.[0-9]+')
          echo "Latest version found: $VERSION"
          # 将版本号设置为一个环境变量，供后续步骤使用
          echo "FRP_VERSION=$VERSION" >> $GITHUB_ENV

      # 【新增步骤】设置 Docker 镜像仓库名称（转换为小写）
      - name: Set Docker Image Repository Name
        run: |
          # 使用 tr 命令将仓库名称转换为小写，并设置为环境变量 REPO_NAME
          echo "REPO_NAME=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      # 3. 设置 Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 4. 登录到 GitHub Container Registry (GHCR)
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }} # 使用触发工作流的用户名
          password: ${{ secrets.GITHUB_TOKEN }} # 使用 GitHub 自动提供的 Token

      # 5. 构建并推送 Docker 镜像到 GHCR
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          # 【关键修改】使用新的环境变量 REPO_NAME
          tags: |
            ghcr.io/${{ env.REPO_NAME }}:latest
            ghcr.io/${{ env.REPO_NAME }}:${{ env.FRP_VERSION }}
          # 将获取到的版本号作为构建参数传递给 Dockerfile
          build-args: |
            FRP_VERSION=${{ env.FRP_VERSION }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

jobs:
  build:
    runs-on: ubuntu-latest

    # 关键：为 GITHUB_TOKEN 授予写入包的权限
    permissions:
      contents: read
      packages: write

    steps:
      # 1. 检出代码
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. 获取最新的 frp 版本号
      - name: Get Latest FRP Version
        id: get_version
        run: |
          echo "Fetching latest FRP release version..."
          # 使用 curl 跟随重定向，并从最终URL中提取版本号
          LATEST_URL=$(curl -s -L -o /dev/null -w '%{url_effective}' https://github.com/fatedier/frp/releases/latest)
          VERSION=$(echo $LATEST_URL | grep -oE 'v[0-9]+\.[0-9]+\.[0-9]+')
          echo "Latest version found: $VERSION"
          # 将版本号设置为一个环境变量，供后续步骤使用
          echo "FRP_VERSION=$VERSION" >> $GITHUB_ENV
      # 3. 设置 Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 4. 登录到 GitHub Container Registry (GHCR)
      # 使用 GITHUB_TOKEN 自动认证，无需配置 Secrets
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }} # 使用触发工作流的用户名
          password: ${{ secrets.GITHUB_TOKEN }} # 使用 GitHub 自动提供的 Token

      # 5. 构建并推送 Docker 镜像到 GHCR
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          # 镜像标签格式为 ghcr.io/<owner>/<repo_name>:<tag>
          tags: |            
            ghcr.io/${{ lower(github.repository) }}:latest
            ghcr.io/${{ lower(github.repository) }}:${{ env.FRP_VERSION }}
          # 将获取到的版本号作为构建参数传递给 Dockerfile
          build-args: |
            FRP_VERSION=${{ env.FRP_VERSION }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
